plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.+'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.graalvm.buildtools.native' version '0.9.18'
    id "org.sonarqube" version "3.5.0.2730"
    id 'jacoco'
}

sonar {
    properties {
        property "sonar.projectKey", "StudyMate"
        property "sonar.qualitygate.wait", true
        property "sonar.coverage.exclusions", "**/lombok/**/*.*, **/pets/example/guardians/configuration/auth/RequestAuthenticatedUserProvider.java, **/pets/example/guardians/services/impl/AccessTokenEncoderDecoderImpl.java, **/pets/example/guardians/configuration/auth/AuthenticationRequestFilter.java, **/pets/example/guardians/configuration/isauthenticated/IsAuthenticatedAspect.java, **/pets/example/guardians/configuration/exceptionhandler/RestCustomExceptionHandler.java"
    }
}

tasks.named('sonar').configure {
    dependsOn jacocoTestReport
}

test {
    jacoco {
        enabled = true
    }
}

tasks.named('jacocoTestReport') {
    reports {
        xml.required = true
        html.destination = file("$buildDir/customJacocoReportDir")
        csv.enabled = true
    }
    dependsOn(test)
}

group = 'pets.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.glassfish:jakarta.el:3.0.4'
    implementation 'org.hibernate.validator:hibernate-validator:6.2.0.Final'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'mysql:mysql-connector-java:8.0.28'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.projectlombok:lombok:1.18.22'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'net.logstash.logback:logstash-logback-encoder:7.1.1'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // Additional dependencies for SQL Server (if needed)
//    implementation 'com.microsoft.sqlserver:mssql-jdbc:9.4.1.jre8'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
}

compileJava {
    options.compilerArgs += '-Xlint:deprecation'
}
